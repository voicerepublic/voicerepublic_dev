#!/bin/bash -x

# on ec2 this file can be found in
# /var/lib/cloud/instance/scripts/part-001

# this redirect everything to a log
exec > /tmp/part-001.log 2>&1

STORAGE=<%= recordings_path %>
PREFIX=<%= slug %>

mkdir -p $STORAGE

if [ -f /sys/hypervisor/uuid ] && [ `head -c 3 /sys/hypervisor/uuid` == ec2 ]; then

  PUBLIC_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)

  HOME=/root

  # mount the bucket
  BUCKET=<%= recordings_bucket %>
  AWS_CREDENTIALS=<%= aws_credentials %>

  echo $AWS_CREDENTIALS > /etc/passwd-s3fs
  chmod 600 /etc/passwd-s3fs
  /usr/local/bin/s3fs $BUCKET $STORAGE -o allow_other

  # FYI
  # ssh admin@<ip> cat INFO.txt
  cat > /home/admin/INFO.txt <<EOF
Host:  <%= %x[hostname].chomp %>
Venue: <%= %x[name] %>
User:  <%= %x[user.name] %>
EOF
else

  PUBLIC_IP=`hostname -I | cut -d ' ' -f 1`
fi

mkdir -p $STORAGE/$PREFIX
chmod 777 $STORAGE/$PREFIX

ENV_LIST=$HOME/env.list

cat >$ENV_LIST <<EOF
<%= env_list %>
PUBLIC_IP=$PUBLIC_IP
EOF

# production
docker run \
       --detach=true \
       --name=icecast \
       --env-file=$ENV_LIST \
       --expose=8000 \
       --publish=<%= port %>:8000 \
       --restart=unless-stopped \
       --volume=$STORAGE/$PREFIX:/share \
       branch14/icecast2

# in dev this helps
#
# docker stop icecast
# docker rm icecast
# docker run \
#        --name=icecast \
#        --env-file=$ENV_LIST \
#        --expose=8000 \
#        --publish=<%= port %>:8000 \
#        --volume=$STORAGE/$PREFIX:/share \
#        branch14/icecast2


# callback to slack -- for debugging only
# CLIENT_TOKEN=<%= client_token %>
# TEXT="Started Icebox on $PUBLIC_IP with client token $CLIENT_TOKEN"
# JSON='{"channel":"@phil","text":"'$TEXT'","icon_emoji":":mushroom:","username":"icecast"}'
#
# curl -X POST -H 'Content-type: application/json' --data "$JSON" \
#      https://hooks.slack.com/services/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
