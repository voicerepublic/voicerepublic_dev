;; Analyzed by ClojureScript 1.7.228
{:use-macros {deftype cljs.pprint, print-length-loop cljs.pprint, defdirectives cljs.pprint, getf cljs.pprint, pprint-logical-block cljs.pprint, formatter-out cljs.pprint, with-pretty-writer cljs.pprint, setf cljs.pprint}, :excludes #{pr deftype prn println print}, :name cljs.pprint, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.core cljs.core, string clojure.string, clojure.string clojure.string, gstring goog.string, goog.string goog.string, StringBuffer goog.string.StringBuffer}, :uses {IWriter cljs.core, IDeref cljs.core}, :defs {indent-t {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/indent-t, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :type true, :column 10, :internal-ctor true, :line 259, :record true, :end-line 259, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, t_cljs$pprint27773 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27773, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 1985, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$pprint27767 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([capitalize-word-writer writer last-was-whitespace? meta27768])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27767, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([capitalize-word-writer writer last-was-whitespace? meta27768]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1985, :max-fixed-arity 4, :fn-var true, :arglists (quote ([capitalize-word-writer writer last-was-whitespace? meta27768])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, write-token-string {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 399, :column 8, :end-line 399, :end-column 26, :private true, :arglists (quote ([this tokens]))}, :private true, :name cljs.pprint/write-token-string, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([this tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this tokens]))}, process-nesting {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2657, :column 8, :end-line 2657, :end-column 23, :private true, :arglists (quote ([format])), :doc "Take a linearly compiled format and process the bracket directives to give it\n   the appropriate tree structure"}, :private true, :name cljs.pprint/process-nesting, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2657, :end-line 2657, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :doc "Take a linearly compiled format and process the bracket directives to give it\n   the appropriate tree structure"}, init-cap-writer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2007, :column 8, :end-line 2007, :end-column 23, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing the first word"}, :private true, :name cljs.pprint/init-cap-writer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2007, :end-line 2007, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing the first word"}, check-enumerated-arg {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 833, :column 8, :end-line 833, :end-column 28, :private true, :arglists (quote ([arg choices]))}, :private true, :name cljs.pprint/check-enumerated-arg, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 28, :method-params ([arg choices]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 833, :end-line 833, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arg choices]))}, brackets {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2923, :column 8, :end-line 2923, :end-column 16, :private true, :arglists (quote ([form])), :doc "Figure out which kind of brackets to use"}, :private true, :name cljs.pprint/brackets, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2923, :end-line 2923, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Figure out which kind of brackets to use"}, get-section {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 358, :column 8, :end-line 358, :end-column 19, :private true, :arglists (quote ([buffer]))}, :private true, :name cljs.pprint/get-section, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buffer]))}, readable-character {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1359, :column 8, :end-line 1359, :end-column 26, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/readable-character, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1359, :end-line 1359, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, linear-nl? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 324, :column 8, :end-line 324, :end-column 18, :private true, :arglists (quote ([this lb section]))}, :private true, :name cljs.pprint/linear-nl?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([this lb section]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this lb section]))}, base-str {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1087, :column 8, :end-line 1087, :end-column 16, :private true, :arglists (quote ([base val])), :doc "Return val as a string in the given base"}, :private true, :name cljs.pprint/base-str, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :method-params ([base val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1087, :end-line 1087, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base val])), :doc "Return val as a string in the given base"}, ->t_cljs$pprint27761 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([upcase-writer writer meta27762])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27761, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([upcase-writer writer meta27762]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1940, :max-fixed-arity 3, :fn-var true, :arglists (quote ([upcase-writer writer meta27762])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, buffer-length {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 243, :column 8, :end-line 243, :end-column 21, :private true, :arglists (quote ([l]))}, :private true, :name cljs.pprint/buffer-length, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, integral? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1065, :column 8, :end-line 1065, :end-column 17, :private true, :arglists (quote ([x])), :doc "returns true if a number is actually an integer (that is, has no fractional part)"}, :private true, :name cljs.pprint/integral?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1065, :end-line 1065, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns true if a number is actually an integer (that is, has no fractional part)"}, *print-circle* {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 649, :column 1, :end-line 649, :end-column 15, :private true, :doc "Mark circular structures (N.B. This is not yet used)", :dynamic true}, :private true, :name cljs.pprint/*print-circle*, :file "public/js/out/cljs/pprint.cljs", :end-column 15, :column 1, :dynamic true, :line 646, :end-line 649, :doc "Mark circular structures (N.B. This is not yet used)"}, param-pattern {:name cljs.pprint/param-pattern, :file "public/js/out/cljs/pprint.cljs", :line 2446, :column 1, :end-line 2447, :end-column 19, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2447, :column 6, :end-line 2447, :end-column 19, :private true}}, boolean-conditional {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1701, :column 8, :end-line 1701, :end-column 27, :private true, :arglists (quote ([params arg-navigator offsets]))}, :private true, :name cljs.pprint/boolean-conditional, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1701, :end-line 1701, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params arg-navigator offsets]))}, add-english-scales {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1196, :column 8, :end-line 1196, :end-column 26, :private true, :arglists (quote ([parts offset])), :doc "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\n  offset is a factor of 10^3 to multiply by"}, :private true, :name cljs.pprint/add-english-scales, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([parts offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1196, :end-line 1196, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parts offset])), :doc "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\n  offset is a factor of 10^3 to multiply by"}, pprint {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 811, :column 7, :end-line 811, :end-column 13, :arglists (quote ([object] [object writer])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object writer]), :arglists ([object] [object writer]), :arglists-meta (nil nil)}}, :name cljs.pprint/pprint, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object writer]), :arglists ([object] [object writer]), :arglists-meta (nil nil)}, :method-params ([object] [object writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 811, :end-line 811, :max-fixed-arity 2, :fn-var true, :arglists ([object] [object writer])}, iterate-main-sublists {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1802, :column 8, :end-line 1802, :end-column 29, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-main-sublists, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 29, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1802, :end-line 1802, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, simple-dispatch {:name cljs.pprint/simple-dispatch, :file "public/js/out/cljs/pprint.cljs", :line 2898, :column 1, :end-line 2898, :end-column 26, :doc "The pretty print dispatch function for simple data structure format.", :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2898, :column 11, :end-line 2898, :end-column 26, :doc "The pretty print dispatch function for simple data structure format."}}, pr {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 43, :column 18, :end-line 43, :end-column 20, :dynamic true, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/pr, :variadic true, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :dynamic true, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, needs-pretty {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2692, :column 8, :end-line 2692, :end-column 20, :private true, :arglists (quote ([format])), :doc "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing"}, :private true, :name cljs.pprint/needs-pretty, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2692, :end-line 2692, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :doc "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing"}, get-column {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 159, :column 8, :end-line 159, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-column, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, pprint-let {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3057, :column 8, :end-line 3057, :end-column 18, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-let, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3057, :end-line 3057, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, english-cardinal-tens {:name cljs.pprint/english-cardinal-tens, :file "public/js/out/cljs/pprint.cljs", :line 1157, :column 1, :end-line 1158, :end-column 27, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1158, :column 6, :end-line 1158, :end-column 27, :private true}}, special-chars {:name cljs.pprint/special-chars, :file "public/js/out/cljs/pprint.cljs", :line 1342, :column 1, :end-line 1343, :end-column 19, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1343, :column 6, :end-line 1343, :end-column 19, :private true}}, t_cljs$pprint27785 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27785, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 2011, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, justify-clauses {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1861, :column 8, :end-line 1861, :end-column 23, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/justify-clauses, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1861, :end-line 1861, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, write-line {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 423, :column 8, :end-line 423, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-line, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, get-pretty-writer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2052, :column 7, :end-line 2052, :end-column 24, :arglists (quote ([writer])), :doc "Returns the IWriter passed in wrapped in a pretty writer proxy, unless it's\nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be\npreserved across calls, you will want to wrap them with this.\n\nFor example, when you want to generate column-aware output with multiple calls to cl-format,\ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1\n       2      4       8\n       3      9      27\n       4     16      64\n       5     25     125\n       6     36     216\n       7     49     343\n       8     64     512\n       9     81     729\n      10    100    1000"}, :name cljs.pprint/get-pretty-writer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 24, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2052, :end-line 2052, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns the IWriter passed in wrapped in a pretty writer proxy, unless it's\nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be\npreserved across calls, you will want to wrap them with this.\n\nFor example, when you want to generate column-aware output with multiple calls to cl-format,\ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1\n       2      4       8\n       3      9      27\n       4     16      64\n       5     25     125\n       6     36     216\n       7     49     343\n       8     64     512\n       9     81     729\n      10    100    1000"}, *print-suppress-namespaces* {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 661, :column 1, :end-line 661, :end-column 28, :doc "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-suppress-namespaces*, :file "public/js/out/cljs/pprint.cljs", :end-column 28, :column 1, :dynamic true, :line 657, :end-line 661, :doc "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions"}, level-exceeded {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 838, :column 8, :end-line 838, :end-column 22, :private true, :arglists (quote ([]))}, :private true, :name cljs.pprint/level-exceeded, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 838, :end-line 838, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, t_cljs$pprint27767 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27767, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 1985, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, logical-block {:private true, :num-fields 10, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/logical-block, :file "public/js/out/cljs/pprint.cljs", :end-column 42, :type true, :column 29, :internal-ctor true, :line 230, :record true, :end-line 230, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, make-nl-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([type logical-block start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-nl-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([type logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :max-fixed-arity 4, :fn-var true, :arglists (quote ([type logical-block start-pos end-pos]))}, map->nl-t {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 253, :column 10, :end-line 253, :end-column 14, :internal-ctor true, :factory :map, :arglists (quote ([G__27347]))}, :name cljs.pprint/map->nl-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 14, :method-params ([G__27347]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27347]))}, dollar-float {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1663, :column 8, :end-line 1663, :end-column 20, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/dollar-float, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1663, :end-line 1663, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, ->t_cljs$pprint27773 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([capitalize-word-writer writer last-was-whitespace? meta27774])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27773, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([capitalize-word-writer writer last-was-whitespace? meta27774]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1985, :max-fixed-arity 4, :fn-var true, :arglists (quote ([capitalize-word-writer writer last-was-whitespace? meta27774])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, write-initial-lines {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 453, :column 8, :end-line 453, :end-column 27, :private true, :arglists (quote ([this s]))}, :private true, :name cljs.pprint/write-initial-lines, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([this s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this s]))}, indent-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__26493__auto__])), :file nil}, :private true, :name cljs.pprint/indent-t?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([x__26493__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__26493__auto__]))}, char-code {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 62, :column 7, :end-line 62, :end-column 16, :arglists (quote ([c])), :doc "Convert char to int"}, :name cljs.pprint/char-code, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Convert char to int"}, insert-scaled-decimal {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1506, :column 8, :end-line 1506, :end-column 29, :private true, :arglists (quote ([m k])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, :private true, :name cljs.pprint/insert-scaled-decimal, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 29, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1506, :end-line 1506, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, add-padding {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3291, :column 8, :end-line 3291, :end-column 19, :private true, :arglists (quote ([width s]))}, :private true, :name cljs.pprint/add-padding, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([width s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3291, :end-line 3291, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width s]))}, arg-navigator {:private true, :num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/arg-navigator, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :type true, :column 3, :internal-ctor true, :line 944, :record true, :end-line 944, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->compiled-directive {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 988, :column 3, :end-line 988, :end-column 21, :private true, :internal-ctor true, :factory :map, :arglists (quote ([G__27538]))}, :private true, :name cljs.pprint/map->compiled-directive, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([G__27538]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 987, :end-line 988, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27538]))}, *current-length* {:name cljs.pprint/*current-length*, :file "public/js/out/cljs/pprint.cljs", :line 684, :column 1, :end-line 684, :end-column 49, :private true, :dynamic true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 684, :column 33, :end-line 684, :end-column 49, :private true, :dynamic true}}, round-str {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1439, :column 8, :end-line 1439, :end-column 17, :private true, :arglists (quote ([m e d w]))}, :private true, :name cljs.pprint/round-str, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([m e d w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1439, :end-line 1439, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m e d w]))}, *print-pretty* {:name cljs.pprint/*print-pretty*, :file "public/js/out/cljs/pprint.cljs", :line 615, :column 1, :end-line 617, :end-column 16, :doc "Bind to true if you want write to use pretty printing", :dynamic true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 617, :column 2, :end-line 617, :end-column 16, :doc "Bind to true if you want write to use pretty printing", :dynamic true}}, *print-pprint-dispatch* {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 623, :column 2, :end-line 623, :end-column 25, :doc "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-pprint-dispatch*, :file "public/js/out/cljs/pprint.cljs", :end-column 25, :column 1, :dynamic true, :line 619, :end-line 623, :doc "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify."}, write-option-table {:name cljs.pprint/write-option-table, :file "public/js/out/cljs/pprint.cljs", :line 692, :column 1, :end-line 692, :end-column 41, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 692, :column 23, :end-line 692, :end-column 41, :private true}}, pp-newline {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 261, :column 16, :end-line 261, :end-column 26, :private true}, :private true, :name cljs.pprint/pp-newline, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 261, :end-line 261, :max-fixed-arity 0, :fn-var true, :arglists nil}, upcase-writer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1937, :column 8, :end-line 1937, :end-column 21, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to upper case"}, :private true, :name cljs.pprint/upcase-writer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1937, :end-line 1937, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to upper case"}, start-block-t {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/start-block-t, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :type true, :column 10, :internal-ctor true, :line 255, :record true, :end-line 255, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, execute-sub-format {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1379, :column 8, :end-line 1379, :end-column 26, :private true, :arglists (quote ([format args base-args]))}, :private true, :name cljs.pprint/execute-sub-format, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([format args base-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1379, :end-line 1379, :max-fixed-arity 3, :fn-var true, :arglists (quote ([format args base-args]))}, end-block-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__26493__auto__])), :file nil}, :private true, :name cljs.pprint/end-block-t?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([x__26493__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__26493__auto__]))}, nl-t {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/nl-t, :file "public/js/out/cljs/pprint.cljs", :end-column 14, :type true, :column 10, :internal-ctor true, :line 253, :record true, :end-line 253, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, conditional-newline {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2152, :column 8, :end-line 2152, :end-column 27, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/conditional-newline, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2152, :end-line 2152, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, make-buffer-blob {:protocol-inline nil, :meta {:private true, :arglists (quote ([data trailing-white-space start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-buffer-blob, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([data trailing-white-space start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :max-fixed-arity 4, :fn-var true, :arglists (quote ([data trailing-white-space start-pos end-pos]))}, pprint-newline {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 841, :column 7, :end-line 841, :end-column 21, :arglists (quote ([kind])), :doc "Print a conditional newline to a pretty printing stream. kind specifies if the\n  newline is :linear, :miser, :fill, or :mandatory.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Output is sent to *out* which must be a pretty printing writer."}, :name cljs.pprint/pprint-newline, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([kind]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 841, :end-line 841, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kind])), :doc "Print a conditional newline to a pretty printing stream. kind specifies if the\n  newline is :linear, :miser, :fill, or :mandatory.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Output is sent to *out* which must be a pretty printing writer."}, float-parts-base {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1397, :column 8, :end-line 1397, :end-column 24, :private true, :arglists (quote ([f])), :doc "Produce string parts for the mantissa (normalize 1-9) and exponent"}, :private true, :name cljs.pprint/float-parts-base, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 24, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1397, :end-line 1397, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Produce string parts for the mantissa (normalize 1-9) and exponent"}, rtrim {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 112, :column 8, :end-line 112, :end-column 13, :private true, :arglists (quote ([s c]))}, :private true, :name cljs.pprint/rtrim, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 13, :method-params ([s c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s c]))}, collect-clauses {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2608, :column 8, :end-line 2608, :end-column 23, :private true, :arglists (quote ([bracket-info offset remainder]))}, :private true, :name cljs.pprint/collect-clauses, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([bracket-info offset remainder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2608, :end-line 2608, :max-fixed-arity 3, :fn-var true, :arglists (quote ([bracket-info offset remainder]))}, pprint-vector {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2826, :column 8, :end-line 2826, :end-column 21, :private true, :arglists (quote ([avec]))}, :private true, :name cljs.pprint/pprint-vector, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([avec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2826, :end-line 2826, :max-fixed-arity 1, :fn-var true, :arglists (quote ([avec]))}, compile-raw-string {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2562, :column 8, :end-line 2562, :end-column 26, :private true, :arglists (quote ([s offset]))}, :private true, :name cljs.pprint/compile-raw-string, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([s offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2562, :end-line 2562, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s offset]))}, code-dispatch {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3197, :column 3, :end-line 3197, :end-column 16, :added "1.2", :arglists (quote [[object]]), :doc "The pretty print dispatch function for pretty printing Clojure code."}, :added "1.2", :name cljs.pprint/code-dispatch, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :column 1, :line 3196, :end-line 3197, :arglists (quote [[object]]), :doc "The pretty print dispatch function for pretty printing Clojure code."}, end-block-t {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/end-block-t, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :type true, :column 10, :internal-ctor true, :line 257, :record true, :end-line 257, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, emit-nl? {:name cljs.pprint/emit-nl?, :file "public/js/out/cljs/pprint.cljs", :line 335, :column 1, :end-line 335, :end-column 36, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 335, :column 28, :end-line 335, :end-column 36, :private true}}, get-max-column {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 165, :column 8, :end-line 165, :end-column 22, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-max-column, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, set-max-column {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 168, :column 8, :end-line 168, :end-column 22, :private true, :arglists (quote ([this new-max]))}, :private true, :name cljs.pprint/set-max-column, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([this new-max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-max]))}, cached-compile {:name cljs.pprint/cached-compile, :file "public/js/out/cljs/pprint.cljs", :line 2755, :column 1, :end-line 2755, :end-column 37, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2755, :column 23, :end-line 2755, :end-column 37, :private true}}, c-write-char {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 176, :column 8, :end-line 176, :end-column 20, :private true, :arglists (quote ([this c]))}, :private true, :name cljs.pprint/c-write-char, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([this c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this c]))}, pprint-array {:name cljs.pprint/pprint-array, :file "public/js/out/cljs/pprint.cljs", :line 2836, :column 1, :end-line 2836, :end-column 35, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2836, :column 23, :end-line 2836, :end-column 35, :private true}}, general-float {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1640, :column 8, :end-line 1640, :end-column 21, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/general-float, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1640, :end-line 1640, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, write-buffered-output {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 439, :column 8, :end-line 439, :end-column 29, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-buffered-output, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 439, :end-line 439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, realize-parameter-list {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1014, :column 8, :end-line 1014, :end-column 30, :private true, :arglists (quote ([parameter-map navigator]))}, :private true, :name cljs.pprint/realize-parameter-list, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 30, :method-params ([parameter-map navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1014, :end-line 1014, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parameter-map navigator]))}, process-clause {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2584, :column 8, :end-line 2584, :end-column 22, :private true, :arglists (quote ([bracket-info offset remainder]))}, :private true, :name cljs.pprint/process-clause, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([bracket-info offset remainder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2584, :end-line 2584, :max-fixed-arity 3, :fn-var true, :arglists (quote ([bracket-info offset remainder]))}, update-nl-state {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 373, :column 8, :end-line 373, :end-column 23, :private true, :arglists (quote ([lb]))}, :private true, :name cljs.pprint/update-nl-state, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([lb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 373, :end-line 373, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lb]))}, javascript-base-formats {:name cljs.pprint/javascript-base-formats, :file "public/js/out/cljs/pprint.cljs", :line 1102, :column 1, :end-line 1103, :end-column 26, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1103, :column 3, :end-line 1103, :end-column 26, :private true}}, ->t_cljs$pprint27743 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([downcase-writer writer meta27744])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27743, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([downcase-writer writer meta27744]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1919, :max-fixed-arity 3, :fn-var true, :arglists (quote ([downcase-writer writer meta27744])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, write-token {:name cljs.pprint/write-token, :file "public/js/out/cljs/pprint.cljs", :line 265, :column 1, :end-line 265, :end-column 39, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 265, :column 28, :end-line 265, :end-column 39, :private true}}, pprint-ns {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2964, :column 8, :end-line 2964, :end-column 17, :private true, :arglists (quote ([alis])), :doc "The pretty print dispatch chunk for the ns macro"}, :private true, :name cljs.pprint/pprint-ns, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2964, :end-line 2964, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis])), :doc "The pretty print dispatch chunk for the ns macro"}, float? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 54, :column 16, :end-line 54, :end-column 22, :tag boolean, :arglists (quote ([n])), :doc "Returns true if n is an float."}, :name cljs.pprint/float?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :ret-tag boolean, :end-line 54, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([n])), :doc "Returns true if n is an float."}, iterate-list-of-sublists {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1755, :column 8, :end-line 1755, :end-column 32, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-list-of-sublists, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 32, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1755, :end-line 1755, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, logical-block-or-justify {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1836, :column 8, :end-line 1836, :end-column 32, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/logical-block-or-justify, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 32, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1836, :end-line 1836, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, ->t_cljs$pprint27463 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([pretty-writer writer max-columns miser-width lb fields meta27464])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27463, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([pretty-writer writer max-columns miser-width lb fields meta27464]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 509, :max-fixed-arity 7, :fn-var true, :arglists (quote ([pretty-writer writer max-columns miser-width lb fields meta27464])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, opt-base-str {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1105, :column 8, :end-line 1105, :end-column 20, :private true, :arglists (quote ([base val])), :doc "Return val as a string in the given base. No cljs format, so no improved performance."}, :private true, :name cljs.pprint/opt-base-str, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([base val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1105, :end-line 1105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base val])), :doc "Return val as a string in the given base. No cljs format, so no improved performance."}, t_cljs$pprint27755 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27755, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 3, :line 1940, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, compiled-directive {:private true, :num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/compiled-directive, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :type true, :column 3, :internal-ctor true, :line 988, :record true, :end-line 988, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, get-format-arg {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 967, :column 8, :end-line 967, :end-column 22, :private true, :arglists (quote ([navigator]))}, :private true, :name cljs.pprint/get-format-arg, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 967, :end-line 967, :max-fixed-arity 1, :fn-var true, :arglists (quote ([navigator]))}, split-at-newline {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 393, :column 8, :end-line 393, :end-column 24, :private true, :arglists (quote ([tokens]))}, :private true, :name cljs.pprint/split-at-newline, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 24, :method-params ([tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 393, :end-line 393, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tokens]))}, special-params {:name cljs.pprint/special-params, :file "public/js/out/cljs/pprint.cljs", :line 2449, :column 1, :end-line 2450, :end-column 20, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2450, :column 6, :end-line 2450, :end-column 20, :private true}}, *symbol-map* {:name cljs.pprint/*symbol-map*, :file "public/js/out/cljs/pprint.cljs", :line 3113, :column 1, :end-line 3113, :end-column 45, :private true, :dynamic true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3113, :column 33, :end-line 3113, :end-column 45, :private true, :dynamic true}}, pprint-ns-reference {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2930, :column 8, :end-line 2930, :end-column 27, :private true, :arglists (quote ([reference])), :doc "Pretty print a single reference (import, use, etc.) from a namespace decl"}, :private true, :name cljs.pprint/pprint-ns-reference, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([reference]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2930, :end-line 2930, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reference])), :doc "Pretty print a single reference (import, use, etc.) from a namespace decl"}, else-separator? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2569, :column 8, :end-line 2569, :end-column 23, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/else-separator?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2569, :end-line 2569, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, get-miser-width {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 603, :column 8, :end-line 603, :end-column 23, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-miser-width, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 603, :end-line 603, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, group-by* {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1110, :column 8, :end-line 1110, :end-column 17, :private true, :arglists (quote ([unit lis]))}, :private true, :name cljs.pprint/group-by*, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([unit lis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1110, :end-line 1110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([unit lis]))}, init-navigator {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 946, :column 8, :end-line 946, :end-column 22, :private true, :arglists (quote ([s])), :doc "Create a new arg-navigator from the sequence with the position set to 0", :skip-wiki true}, :private true, :name cljs.pprint/init-navigator, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 946, :end-line 946, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Create a new arg-navigator from the sequence with the position set to 0"}, write-white-space {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 446, :column 8, :end-line 446, :end-column 25, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-white-space, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 446, :end-line 446, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, *print-shared* {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 655, :column 1, :end-line 655, :end-column 15, :private true, :doc "Mark repeated structures rather than repeat them (N.B. This is not yet used)", :dynamic true}, :private true, :name cljs.pprint/*print-shared*, :file "public/js/out/cljs/pprint.cljs", :end-column 15, :column 1, :dynamic true, :line 652, :end-line 655, :doc "Mark repeated structures rather than repeat them (N.B. This is not yet used)"}, *code-table* {:name cljs.pprint/*code-table*, :file "public/js/out/cljs/pprint.cljs", :line 3166, :column 1, :end-line 3166, :end-column 45, :private true, :dynamic true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3166, :column 33, :end-line 3166, :end-column 45, :private true, :dynamic true}}, insert-decimal {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1495, :column 8, :end-line 1495, :end-column 22, :private true, :arglists (quote ([m e])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, :private true, :name cljs.pprint/insert-decimal, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([m e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1495, :end-line 1495, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m e])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, indent {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 591, :column 8, :end-line 591, :end-column 14, :private true, :arglists (quote ([this relative-to offset]))}, :private true, :name cljs.pprint/indent, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 14, :method-params ([this relative-to offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 591, :end-line 591, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this relative-to offset]))}, ltrim {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 123, :column 8, :end-line 123, :end-column 13, :private true, :arglists (quote ([s c]))}, :private true, :name cljs.pprint/ltrim, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 13, :method-params ([s c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s c]))}, multi-defn {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3011, :column 8, :end-line 3011, :end-column 18, :private true, :arglists (quote ([alis has-doc-str?]))}, :private true, :name cljs.pprint/multi-defn, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([alis has-doc-str?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3011, :end-line 3011, :max-fixed-arity 2, :fn-var true, :arglists (quote ([alis has-doc-str?]))}, pprint-binding-form {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3042, :column 8, :end-line 3042, :end-column 27, :private true, :arglists (quote ([binding-vec]))}, :private true, :name cljs.pprint/pprint-binding-form, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([binding-vec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3042, :end-line 3042, :max-fixed-arity 1, :fn-var true, :arglists (quote ([binding-vec]))}, pprint-code-symbol {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3189, :column 8, :end-line 3189, :end-column 26, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.pprint/pprint-code-symbol, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3189, :end-line 3189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, realize-parameter {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 998, :column 8, :end-line 998, :end-column 25, :private true, :arglists (quote ([[param [raw-val offset]] navigator]))}, :private true, :name cljs.pprint/realize-parameter, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 25, :method-params ([p__27544 navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 998, :end-line 998, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[param [raw-val offset]] navigator]))}, ->arg-navigator {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 944, :column 3, :end-line 944, :end-column 16, :private true, :internal-ctor true, :factory :positional, :arglists (quote ([seq rest pos]))}, :private true, :name cljs.pprint/->arg-navigator, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :method-params ([seq rest pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 943, :end-line 944, :max-fixed-arity 3, :fn-var true, :arglists (quote ([seq rest pos]))}, next-arg {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 954, :column 8, :end-line 954, :end-column 16, :private true, :arglists (quote ([navigator]))}, :private true, :name cljs.pprint/next-arg, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :method-params ([navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 954, :end-line 954, :max-fixed-arity 1, :fn-var true, :arglists (quote ([navigator]))}, column-writer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 184, :column 8, :end-line 184, :end-column 21, :private true, :arglists (quote ([writer] [writer max-columns])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer] [writer max-columns]), :arglists ([writer] [writer max-columns]), :arglists-meta (nil nil)}}, :private true, :name cljs.pprint/column-writer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer] [writer max-columns]), :arglists ([writer] [writer max-columns]), :arglists-meta (nil nil)}, :method-params ([writer] [writer max-columns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists ([writer] [writer max-columns])}, check-flags {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2499, :column 8, :end-line 2499, :end-column 19, :private true, :arglists (quote ([def flags]))}, :private true, :name cljs.pprint/check-flags, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([def flags]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2499, :end-line 2499, :max-fixed-arity 2, :fn-var true, :arglists (quote ([def flags]))}, get-sub-section {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 365, :column 8, :end-line 365, :end-column 23, :private true, :arglists (quote ([buffer]))}, :private true, :name cljs.pprint/get-sub-section, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buffer]))}, pretty-writer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 494, :column 8, :end-line 494, :end-column 21, :private true, :arglists (quote ([writer max-columns miser-width]))}, :private true, :name cljs.pprint/pretty-writer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([writer max-columns miser-width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 494, :end-line 494, :max-fixed-arity 3, :fn-var true, :arglists (quote ([writer max-columns miser-width]))}, type-dispatcher {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2886, :column 8, :end-line 2886, :end-column 23, :private true, :arglists (quote ([obj]))}, :private true, :name cljs.pprint/type-dispatcher, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2886, :end-line 2886, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, execute-format {:protocol-inline nil, :meta {:private true, :file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([stream format args] [format args]), :arglists ([stream format args] [format args]), :arglists-meta (nil nil)}, :skip-wiki true, :column 8, :line 2717, :end-line 2717, :arglists (quote ([stream format args] [format args])), :doc "Executes the format with the arguments."}, :private true, :name cljs.pprint/execute-format, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([stream format args] [format args]), :arglists ([stream format args] [format args]), :arglists-meta (nil nil)}, :method-params ([stream format args] [format args]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 2717, :end-line 2717, :max-fixed-arity 3, :fn-var true, :arglists ([stream format args] [format args]), :doc "Executes the format with the arguments."}, special-radix-markers {:name cljs.pprint/special-radix-markers, :file "public/js/out/cljs/pprint.cljs", :line 1029, :column 1, :end-line 1030, :end-column 24, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1030, :column 3, :end-line 1030, :end-column 24, :private true}}, inc-s {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1423, :column 8, :end-line 1423, :end-column 13, :private true, :arglists (quote ([s])), :doc "Assumption: The input string consists of one or more decimal digits,\n  and no other characters. Return a string containing one or more\n  decimal digits containing a decimal number one larger than the input\n  string. The output string will always be the same length as the input\n  string, or one character longer."}, :private true, :name cljs.pprint/inc-s, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1423, :end-line 1423, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Assumption: The input string consists of one or more decimal digits,\n  and no other characters. Return a string containing one or more\n  decimal digits containing a decimal number one larger than the input\n  string. The output string will always be the same length as the input\n  string, or one character longer."}, english-scale-numbers {:name cljs.pprint/english-scale-numbers, :file "public/js/out/cljs/pprint.cljs", :line 1170, :column 1, :end-line 1171, :end-column 27, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1171, :column 6, :end-line 1171, :end-column 27, :private true}}, pprint-tab {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 866, :column 7, :end-line 866, :end-column 17, :arglists (quote ([kind colnum colinc])), :doc "Tab at this point in the pretty printing stream. kind specifies whether the tab\nis :line, :section, :line-relative, or :section-relative.\n\nColnum and colinc specify the target column and the increment to move the target\nforward if the output is already past the original target.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n\nTHIS FUNCTION IS NOT YET IMPLEMENTED.", :added "1.2"}, :added "1.2", :name cljs.pprint/pprint-tab, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([kind colnum colinc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 866, :end-line 866, :max-fixed-arity 3, :fn-var true, :arglists (quote ([kind colnum colinc])), :doc "Tab at this point in the pretty printing stream. kind specifies whether the tab\nis :line, :section, :line-relative, or :section-relative.\n\nColnum and colinc specify the target column and the increment to move the target\nforward if the output is already past the original target.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n\nTHIS FUNCTION IS NOT YET IMPLEMENTED."}, unzip-map {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 101, :column 8, :end-line 101, :end-column 17, :private true, :arglists (quote ([m]))}, :private true, :name cljs.pprint/unzip-map, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, format-integer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1115, :column 8, :end-line 1115, :end-column 22, :private true, :arglists (quote ([base params arg-navigator offsets]))}, :private true, :name cljs.pprint/format-integer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([base params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1115, :end-line 1115, :max-fixed-arity 4, :fn-var true, :arglists (quote ([base params arg-navigator offsets]))}, next-arg-or-nil {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 960, :column 8, :end-line 960, :end-column 23, :private true, :arglists (quote ([navigator]))}, :private true, :name cljs.pprint/next-arg-or-nil, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 960, :end-line 960, :max-fixed-arity 1, :fn-var true, :arglists (quote ([navigator]))}, map->logical-block {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 230, :column 29, :end-line 230, :end-column 42, :private true, :internal-ctor true, :factory :map, :arglists (quote ([G__27330]))}, :private true, :name cljs.pprint/map->logical-block, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 42, :method-params ([G__27330]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27330]))}, pprint-cond {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3073, :column 8, :end-line 3073, :end-column 19, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-cond, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3073, :end-line 3073, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, iterate-main-list {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1778, :column 8, :end-line 1778, :end-column 25, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-main-list, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 25, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1778, :end-line 1778, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, pprint-list {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2821, :column 8, :end-line 2821, :end-column 19, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-list, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2821, :end-line 2821, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, pprint-hold-first {:name cljs.pprint/pprint-hold-first, :file "public/js/out/cljs/pprint.cljs", :line 2995, :column 1, :end-line 2995, :end-column 40, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2995, :column 23, :end-line 2995, :end-column 40, :private true}}, fixed-float {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1519, :column 8, :end-line 1519, :end-column 19, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/fixed-float, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1519, :end-line 1519, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, map-passing-context {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 74, :column 8, :end-line 74, :end-column 27, :private true, :arglists (quote ([func initial-context lis]))}, :private true, :name cljs.pprint/map-passing-context, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([func initial-context lis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 3, :fn-var true, :arglists (quote ([func initial-context lis]))}, prn {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 46, :column 8, :end-line 46, :end-column 11, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/prn, :variadic true, :file "public/js/out/cljs/pprint.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, write-tokens {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 301, :column 8, :end-line 301, :end-column 20, :private true, :arglists (quote ([this tokens force-trailing-whitespace]))}, :private true, :name cljs.pprint/write-tokens, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([this tokens force-trailing-whitespace]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this tokens force-trailing-whitespace]))}, pprint-ideref {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2873, :column 8, :end-line 2873, :end-column 21, :private true, :arglists (quote ([o]))}, :private true, :name cljs.pprint/pprint-ideref, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2873, :end-line 2873, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, format-simple-ordinal {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1236, :column 8, :end-line 1236, :end-column 29, :private true, :arglists (quote ([num])), :doc "Convert a number less than 1000 to a ordinal english string\n  Note this should only be used for the last one in the sequence"}, :private true, :name cljs.pprint/format-simple-ordinal, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 29, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1236, :end-line 1236, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Convert a number less than 1000 to a ordinal english string\n  Note this should only be used for the last one in the sequence"}, ->t_cljs$pprint27779 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([init-cap-writer writer capped meta27780])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27779, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([init-cap-writer writer capped meta27780]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 2011, :max-fixed-arity 4, :fn-var true, :arglists (quote ([init-cap-writer writer capped meta27780])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, end-block {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 571, :column 8, :end-line 571, :end-column 17, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/end-block, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 571, :end-line 571, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, start-block-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__26493__auto__])), :file nil}, :private true, :name cljs.pprint/start-block-t?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([x__26493__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__26493__auto__]))}, pprint-set {:name cljs.pprint/pprint-set, :file "public/js/out/cljs/pprint.cljs", :line 2860, :column 1, :end-line 2860, :end-column 16, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2860, :column 6, :end-line 2860, :end-column 16}}, ->start-block-t {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 255, :column 10, :end-line 255, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag logical-block start-pos end-pos]))}, :name cljs.pprint/->start-block-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([type-tag logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 255, :end-line 255, :max-fixed-arity 4, :fn-var true, :arglists (quote ([type-tag logical-block start-pos end-pos]))}, print-table {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3295, :column 7, :end-line 3295, :end-column 18, :arglists (quote ([ks rows] [rows])), :doc "Prints a collection of maps in a textual table. Prints table headings\n   ks, and then a line of output for each row, corresponding to the keys\n   in ks. If ks are not specified, use the keys of the first item in rows.", :added "1.3", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ks rows] [rows]), :arglists ([ks rows] [rows]), :arglists-meta (nil nil)}}, :added "1.3", :name cljs.pprint/print-table, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ks rows] [rows]), :arglists ([ks rows] [rows]), :arglists-meta (nil nil)}, :method-params ([ks rows] [rows]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3295, :end-line 3295, :max-fixed-arity 2, :fn-var true, :arglists ([ks rows] [rows]), :doc "Prints a collection of maps in a textual table. Prints table headings\n   ks, and then a line of output for each row, corresponding to the keys\n   in ks. If ks are not specified, use the keys of the first item in rows."}, relative-reposition {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 981, :column 8, :end-line 981, :end-column 27, :private true, :arglists (quote ([navigator position]))}, :private true, :name cljs.pprint/relative-reposition, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([navigator position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 981, :end-line 981, :max-fixed-arity 2, :fn-var true, :arglists (quote ([navigator position]))}, pprint-anon-func {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3115, :column 8, :end-line 3115, :end-column 24, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-anon-func, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 24, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3115, :end-line 3115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, capitalize-string {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1958, :column 8, :end-line 1958, :end-column 25, :private true, :arglists (quote ([s first?])), :doc "Capitalizes the words in a string. If first? is false, don't capitalize the\n                                      first character of the string even if it's a letter."}, :private true, :name cljs.pprint/capitalize-string, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 25, :method-params ([s first?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1958, :end-line 1958, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s first?])), :doc "Capitalizes the words in a string. If first? is false, don't capitalize the\n                                      first character of the string even if it's a letter."}, start-block {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 551, :column 8, :end-line 551, :end-column 19, :private true, :arglists (quote ([this prefix per-line-prefix suffix]))}, :private true, :name cljs.pprint/start-block, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([this prefix per-line-prefix suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 551, :end-line 551, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this prefix per-line-prefix suffix]))}, relative-tabulation {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2113, :column 8, :end-line 2113, :end-column 27, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/relative-tabulation, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2113, :end-line 2113, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, set-pprint-dispatch {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 824, :column 7, :end-line 824, :end-column 26, :arglists (quote ([function]))}, :name cljs.pprint/set-pprint-dispatch, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 824, :end-line 824, :max-fixed-arity 1, :fn-var true, :arglists (quote ([function]))}, remainders {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1075, :column 8, :end-line 1075, :end-column 18, :private true, :arglists (quote ([base val])), :doc "Return the list of remainders (essentially the 'digits') of val in the given base"}, :private true, :name cljs.pprint/remainders, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([base val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1075, :end-line 1075, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base val])), :doc "Return the list of remainders (essentially the 'digits') of val in the given base"}, fresh-line {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2093, :column 7, :end-line 2093, :end-column 17, :arglists (quote ([])), :doc "Make a newline if *out* is not already at the beginning of the line. If *out* is\nnot a pretty writer (which keeps track of columns), this function always outputs a newline."}, :name cljs.pprint/fresh-line, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2093, :end-line 2093, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Make a newline if *out* is not already at the beginning of the line. If *out* is\nnot a pretty writer (which keeps track of columns), this function always outputs a newline."}, ->logical-block {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 230, :column 29, :end-line 230, :end-column 42, :private true, :internal-ctor true, :factory :positional, :arglists (quote ([parent section start-col indent done-nl intra-block-nl prefix per-line-prefix suffix logical-block-callback]))}, :private true, :name cljs.pprint/->logical-block, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 42, :method-params ([parent section start-col indent done-nl intra-block-nl prefix per-line-prefix suffix logical-block-callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 230, :end-line 230, :max-fixed-arity 10, :fn-var true, :arglists (quote ([parent section start-col indent done-nl intra-block-nl prefix per-line-prefix suffix logical-block-callback]))}, get-field {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 153, :column 8, :end-line 153, :end-column 17, :private true, :arglists (quote ([this sym]))}, :private true, :name cljs.pprint/get-field, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([this sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this sym]))}, pprint-indent {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 852, :column 7, :end-line 852, :end-column 20, :arglists (quote ([relative-to n])), :doc "Create an indent at this point in the pretty printing stream. This defines how\nfollowing lines are indented. relative-to can be either :block or :current depending\nwhether the indent should be computed relative to the start of the logical block or\nthe current column position. n is an offset.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer."}, :name cljs.pprint/pprint-indent, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([relative-to n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 852, :end-line 852, :max-fixed-arity 2, :fn-var true, :arglists (quote ([relative-to n])), :doc "Create an indent at this point in the pretty printing stream. This defines how\nfollowing lines are indented. relative-to can be either :block or :current depending\nwhether the indent should be computed relative to the start of the logical block or\nthe current column position. n is an offset.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer."}, process-bracket {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2575, :column 8, :end-line 2575, :end-column 23, :private true, :arglists (quote ([this remainder]))}, :private true, :name cljs.pprint/process-bracket, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([this remainder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2575, :end-line 2575, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this remainder]))}, map->buffer-blob {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 250, :column 10, :end-line 250, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__27339]))}, :name cljs.pprint/map->buffer-blob, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([G__27339]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 250, :end-line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27339]))}, format-old-roman {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1332, :column 8, :end-line 1332, :end-column 24, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-old-roman, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 24, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1332, :end-line 1332, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, t_cljs$pprint27743 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27743, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 3, :line 1919, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, format-error {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 932, :column 8, :end-line 932, :end-column 20, :private true, :arglists (quote ([message offset]))}, :private true, :name cljs.pprint/format-error, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([message offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 932, :end-line 932, :max-fixed-arity 2, :fn-var true, :arglists (quote ([message offset]))}, *print-radix* {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 670, :column 1, :end-line 670, :end-column 14, :doc "Print a radix specifier in front of integers and rationals. If *print-base* is 2, 8,\nor 16, then the radix specifier used is #b, #o, or #x, respectively. Otherwise the\nradix specifier is in the form #XXr where XX is the decimal value of *print-base* ", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-radix*, :file "public/js/out/cljs/pprint.cljs", :end-column 14, :column 1, :dynamic true, :line 665, :end-line 670, :doc "Print a radix specifier in front of integers and rationals. If *print-base* is 2, 8,\nor 16, then the radix specifier used is #b, #o, or #x, respectively. Otherwise the\nradix specifier is in the form #XXr where XX is the decimal value of *print-base* "}, set-indent {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2146, :column 8, :end-line 2146, :end-column 18, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/set-indent, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2146, :end-line 2146, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, map->arg-navigator {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 944, :column 3, :end-line 944, :end-column 16, :private true, :internal-ctor true, :factory :map, :arglists (quote ([G__27528]))}, :private true, :name cljs.pprint/map->arg-navigator, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :method-params ([G__27528]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 943, :end-line 944, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27528]))}, IPrettyFlush {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 144, :column 14, :end-line 144, :end-column 26, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-ppflush [[pp]]}}}, :protocol-symbol true, :name cljs.pprint/IPrettyFlush, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :column 1, :line 144, :protocol-info {:methods {-ppflush [[pp]]}}, :info nil, :end-line 144, :impls #{cljs.pprint/t_cljs$pprint27463 cljs.pprint/t_cljs$pprint27457}, :doc nil, :jsdoc ("@interface")}, pretty-character {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1345, :column 8, :end-line 1345, :end-column 24, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/pretty-character, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 24, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1345, :end-line 1345, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, println {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 28, :column 8, :end-line 28, :end-column 15, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/println, :variadic true, :file "public/js/out/cljs/pprint.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, prefix-count {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 133, :column 8, :end-line 133, :end-column 20, :private true, :arglists (quote ([aseq val]))}, :private true, :name cljs.pprint/prefix-count, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([aseq val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([aseq val]))}, compile-format {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2672, :column 8, :end-line 2672, :end-column 22, :private true, :arglists (quote ([format-str])), :doc "Compiles format-str into a compiled format which can be used as an argument\nto cl-format just like a plain format string. Use this function for improved\nperformance when you're using the same format string repeatedly"}, :private true, :name cljs.pprint/compile-format, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([format-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2672, :end-line 2672, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format-str])), :doc "Compiles format-str into a compiled format which can be used as an argument\nto cl-format just like a plain format string. Use this function for improved\nperformance when you're using the same format string repeatedly"}, separator? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2567, :column 8, :end-line 2567, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/separator?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2567, :end-line 2567, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, consume {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 85, :column 8, :end-line 85, :end-column 15, :private true, :arglists (quote ([func initial-context]))}, :private true, :name cljs.pprint/consume, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 15, :method-params ([func initial-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func initial-context]))}, modify-case {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2042, :column 8, :end-line 2042, :end-column 19, :private true, :arglists (quote ([make-writer params navigator offsets]))}, :private true, :name cljs.pprint/modify-case, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([make-writer params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2042, :end-line 2042, :max-fixed-arity 4, :fn-var true, :arglists (quote ([make-writer params navigator offsets]))}, translate-param {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2469, :column 8, :end-line 2469, :end-column 23, :private true, :arglists (quote ([[p offset]])), :doc "Translate the string representation of a param to the internalized\n                                      representation"}, :private true, :name cljs.pprint/translate-param, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([p__27873]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2469, :end-line 2469, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[p offset]])), :doc "Translate the string representation of a param to the internalized\n                                      representation"}, cl-format {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 893, :column 7, :end-line 893, :end-column 16, :arglists (quote ([writer format-in & args])), :doc "An implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It\nsupports sophisticated formatting of structured data.\n\nWriter satisfies IWriter, true to output via *print-fn* or nil to output\nto a string, format-in is the format control string and the remaining arguments\nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives'\ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format\nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\"\n                   (count results) results))\n\nPrints via *print-fn*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the\nLanguage, 2nd edition\", Chapter 22 (available online at:\nhttp://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000)\nand in the Common Lisp HyperSpec at\nhttp://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm", :see-also [["http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000" "Common Lisp the Language"] ["http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm" "Common Lisp HyperSpec"]], :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(writer format-in args)], :arglists ([writer format-in & args]), :arglists-meta (nil)}}, :name cljs.pprint/cl-format, :variadic true, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(writer format-in args)], :arglists ([writer format-in & args]), :arglists-meta (nil)}, :method-params [(writer format-in args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 893, :end-line 893, :max-fixed-arity 2, :fn-var true, :arglists ([writer format-in & args]), :see-also [["http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000" "Common Lisp the Language"] ["http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm" "Common Lisp HyperSpec"]], :doc "An implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It\nsupports sophisticated formatting of structured data.\n\nWriter satisfies IWriter, true to output via *print-fn* or nil to output\nto a string, format-in is the format control string and the remaining arguments\nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives'\ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format\nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\"\n                   (count results) results))\n\nPrints via *print-fn*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the\nLanguage, 2nd edition\", Chapter 22 (available online at:\nhttp://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000)\nand in the Common Lisp HyperSpec at\nhttp://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm"}, pprint-reader-macro {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2794, :column 8, :end-line 2794, :end-column 27, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-reader-macro, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2794, :end-line 2794, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, format-logical-block {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2128, :column 8, :end-line 2128, :end-column 28, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-logical-block, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 28, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2128, :end-line 2128, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, english-ordinal-units {:name cljs.pprint/english-ordinal-units, :file "public/js/out/cljs/pprint.cljs", :line 1151, :column 1, :end-line 1152, :end-column 27, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1152, :column 6, :end-line 1152, :end-column 27, :private true}}, directive-table {:name cljs.pprint/directive-table, :meta {:file nil}, :file "public/js/out/cljs/pprint.cljs", :line 2164, :column 1}, *format-str* {:name cljs.pprint/*format-str*, :file "public/js/out/cljs/pprint.cljs", :line 930, :column 1, :end-line 930, :end-column 45, :private true, :dynamic true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 930, :column 33, :end-line 930, :end-column 45, :private true, :dynamic true}}, ->nl-t {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 253, :column 10, :end-line 253, :end-column 14, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag type logical-block start-pos end-pos]))}, :name cljs.pprint/->nl-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 14, :method-params ([type-tag type logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 253, :end-line 253, :max-fixed-arity 5, :fn-var true, :arglists (quote ([type-tag type logical-block start-pos end-pos]))}, compile-directive {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2542, :column 8, :end-line 2542, :end-column 25, :private true, :arglists (quote ([s offset]))}, :private true, :name cljs.pprint/compile-directive, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 25, :method-params ([s offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2542, :end-line 2542, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s offset]))}, two-forms {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3150, :column 8, :end-line 3150, :end-column 17, :private true, :arglists (quote ([amap]))}, :private true, :name cljs.pprint/two-forms, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([amap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3150, :end-line 3150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([amap]))}, ->t_cljs$pprint27755 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([upcase-writer writer meta27756])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27755, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([upcase-writer writer meta27756]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1940, :max-fixed-arity 3, :fn-var true, :arglists (quote ([upcase-writer writer meta27756])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, *current-level* {:name cljs.pprint/*current-level*, :file "public/js/out/cljs/pprint.cljs", :line 682, :column 1, :end-line 682, :end-column 48, :private true, :dynamic true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 682, :column 33, :end-line 682, :end-column 48, :private true, :dynamic true}}, add-core-ns {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3157, :column 8, :end-line 3157, :end-column 19, :private true, :arglists (quote ([amap]))}, :private true, :name cljs.pprint/add-core-ns, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([amap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3157, :end-line 3157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([amap]))}, *print-lines* {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 643, :column 1, :end-line 643, :end-column 14, :private true, :doc "Maximum number of lines to print in a pretty print instance (N.B. This is not yet used)", :dynamic true}, :private true, :name cljs.pprint/*print-lines*, :file "public/js/out/cljs/pprint.cljs", :end-column 14, :column 1, :dynamic true, :line 640, :end-line 643, :doc "Maximum number of lines to print in a pretty print instance (N.B. This is not yet used)"}, render-clauses {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1845, :column 8, :end-line 1845, :end-column 22, :private true, :arglists (quote ([clauses navigator base-navigator]))}, :private true, :name cljs.pprint/render-clauses, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([clauses navigator base-navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1845, :end-line 1845, :max-fixed-arity 3, :fn-var true, :arglists (quote ([clauses navigator base-navigator]))}, format-ascii {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1042, :column 8, :end-line 1042, :end-column 20, :private true, :arglists (quote ([print-func params arg-navigator offsets]))}, :private true, :name cljs.pprint/format-ascii, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([print-func params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1042, :end-line 1042, :max-fixed-arity 4, :fn-var true, :arglists (quote ([print-func params arg-navigator offsets]))}, t_cljs$pprint27463 {:num-fields 7, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27463, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 509, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, format-simple-cardinal {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1178, :column 8, :end-line 1178, :end-column 30, :private true, :arglists (quote ([num])), :doc "Convert a number less than 1000 to a cardinal english string"}, :private true, :name cljs.pprint/format-simple-cardinal, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 30, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1178, :end-line 1178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Convert a number less than 1000 to a cardinal english string"}, ->buffer-blob {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 250, :column 10, :end-line 250, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag data trailing-white-space start-pos end-pos]))}, :name cljs.pprint/->buffer-blob, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([type-tag data trailing-white-space start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 250, :end-line 250, :max-fixed-arity 5, :fn-var true, :arglists (quote ([type-tag data trailing-white-space start-pos end-pos]))}, map->end-block-t {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 257, :column 10, :end-line 257, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__27363]))}, :name cljs.pprint/map->end-block-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([G__27363]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27363]))}, map->start-block-t {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 255, :column 10, :end-line 255, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__27355]))}, :name cljs.pprint/map->start-block-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([G__27355]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27355]))}, ->t_cljs$pprint27457 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([pretty-writer writer max-columns miser-width lb fields meta27458])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27457, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([pretty-writer writer max-columns miser-width lb fields meta27458]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 509, :max-fixed-arity 7, :fn-var true, :arglists (quote ([pretty-writer writer max-columns miser-width lb fields meta27458])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, *print-miser-width* {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 637, :column 2, :end-line 637, :end-column 21, :doc "The column at which to enter miser style. Depending on the dispatch table,\nmiser style add newlines in more places to try to keep lines short allowing for further\nlevels of nesting.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-miser-width*, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :column 1, :dynamic true, :line 632, :end-line 637, :doc "The column at which to enter miser style. Depending on the dispatch table,\nmiser style add newlines in more places to try to keep lines short allowing for further\nlevels of nesting."}, old-roman-table {:name cljs.pprint/old-roman-table, :file "public/js/out/cljs/pprint.cljs", :line 1294, :column 1, :end-line 1295, :end-column 21, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1295, :column 6, :end-line 1295, :end-column 21, :private true}}, pprint-pqueue {:name cljs.pprint/pprint-pqueue, :file "public/js/out/cljs/pprint.cljs", :line 2884, :column 1, :end-line 2884, :end-column 36, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2884, :column 23, :end-line 2884, :end-column 36, :private true}}, get-line {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 162, :column 8, :end-line 162, :end-column 16, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-line, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, pprint-map {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2839, :column 8, :end-line 2839, :end-column 18, :private true, :arglists (quote ([amap]))}, :private true, :name cljs.pprint/pprint-map, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([amap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2839, :end-line 2839, :max-fixed-arity 1, :fn-var true, :arglists (quote ([amap]))}, ->end-block-t {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 257, :column 10, :end-line 257, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag logical-block start-pos end-pos]))}, :name cljs.pprint/->end-block-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([type-tag logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 257, :end-line 257, :max-fixed-arity 4, :fn-var true, :arglists (quote ([type-tag logical-block start-pos end-pos]))}, expand-fixed {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1485, :column 8, :end-line 1485, :end-column 20, :private true, :arglists (quote ([m e d]))}, :private true, :name cljs.pprint/expand-fixed, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([m e d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1485, :end-line 1485, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m e d]))}, format-simple-number {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1032, :column 8, :end-line 1032, :end-column 28, :private true, :arglists (quote ([n]))}, :private true, :name cljs.pprint/format-simple-number, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 28, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1032, :end-line 1032, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, format-roman {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1308, :column 8, :end-line 1308, :end-column 20, :private true, :arglists (quote ([table params navigator offsets])), :doc "Format a roman numeral using the specified look-up table"}, :private true, :name cljs.pprint/format-roman, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([table params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1308, :end-line 1308, :max-fixed-arity 4, :fn-var true, :arglists (quote ([table params navigator offsets])), :doc "Format a roman numeral using the specified look-up table"}, emit-nl {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 382, :column 8, :end-line 382, :end-column 15, :private true, :arglists (quote ([this nl]))}, :private true, :name cljs.pprint/emit-nl, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 15, :method-params ([this nl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this nl]))}, pprint-simple-code-list {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3137, :column 8, :end-line 3137, :end-column 31, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-simple-code-list, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 31, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3137, :end-line 3137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, print {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 25, :column 8, :end-line 25, :end-column 13, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/print, :variadic true, :file "public/js/out/cljs/pprint.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, pprint-code-list {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3183, :column 8, :end-line 3183, :end-column 24, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-code-list, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 24, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3183, :end-line 3183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, make-pretty-writer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 719, :column 8, :end-line 719, :end-column 26, :private true, :arglists (quote ([base-writer right-margin miser-width])), :doc "Wrap base-writer in a PrettyWriter with the specified right-margin and miser-width"}, :private true, :name cljs.pprint/make-pretty-writer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([base-writer right-margin miser-width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 719, :end-line 719, :max-fixed-arity 3, :fn-var true, :arglists (quote ([base-writer right-margin miser-width])), :doc "Wrap base-writer in a PrettyWriter with the specified right-margin and miser-width"}, new-roman-table {:name cljs.pprint/new-roman-table, :file "public/js/out/cljs/pprint.cljs", :line 1301, :column 1, :end-line 1302, :end-column 21, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1302, :column 6, :end-line 1302, :end-column 21, :private true}}, pprint-simple-default {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2856, :column 8, :end-line 2856, :end-column 29, :private true, :arglists (quote ([obj]))}, :private true, :name cljs.pprint/pprint-simple-default, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 29, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2856, :end-line 2856, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, t_cljs$pprint27779 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27779, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 2011, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, float-parts {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1411, :column 8, :end-line 1411, :end-column 19, :private true, :arglists (quote ([f])), :doc "Take care of leading and trailing zeros in decomposed floats"}, :private true, :name cljs.pprint/float-parts, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1411, :end-line 1411, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Take care of leading and trailing zeros in decomposed floats"}, t_cljs$pprint27457 {:num-fields 7, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27457, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 509, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, t_cljs$pprint27749 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27749, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 3, :line 1919, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, nl-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__26493__auto__])), :file nil}, :private true, :name cljs.pprint/nl-t?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([x__26493__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__26493__auto__]))}, write {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 748, :column 7, :end-line 748, :end-column 12, :arglists (quote ([object & kw-args])), :doc "Write an object subject to the current bindings of the printer control variables.\nUse the kw-args argument to override individual variables for this call (and any\nrecursive calls). Returns the string result if :stream is nil or nil otherwise.\n\nThe following keyword arguments can be passed with values:\n  Keyword              Meaning                              Default value\n  :stream              Writer for output or nil             true (indicates *out*)\n  :base                Base to use for writing rationals    Current value of *print-base*\n  :circle*             If true, mark circular structures    Current value of *print-circle*\n  :length              Maximum elements to show in sublists Current value of *print-length*\n  :level               Maximum depth                        Current value of *print-level*\n  :lines*              Maximum lines of output              Current value of *print-lines*\n  :miser-width         Width to enter miser mode            Current value of *print-miser-width*\n  :dispatch            The pretty print dispatch function   Current value of *print-pprint-dispatch*\n  :pretty              If true, do pretty printing          Current value of *print-pretty*\n  :radix               If true, prepend a radix specifier   Current value of *print-radix*\n  :readably*           If true, print readably              Current value of *print-readably*\n  :right-margin        The column for the right margin      Current value of *print-right-margin*\n  :suppress-namespaces If true, no namespaces in symbols    Current value of *print-suppress-namespaces*\n\n  * = not yet supported\n", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(object kw-args)], :arglists ([object & kw-args]), :arglists-meta (nil)}}, :name cljs.pprint/write, :variadic true, :file "public/js/out/cljs/pprint.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(object kw-args)], :arglists ([object & kw-args]), :arglists-meta (nil)}, :method-params [(object kw-args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 748, :end-line 748, :max-fixed-arity 1, :fn-var true, :arglists ([object & kw-args]), :doc "Write an object subject to the current bindings of the printer control variables.\nUse the kw-args argument to override individual variables for this call (and any\nrecursive calls). Returns the string result if :stream is nil or nil otherwise.\n\nThe following keyword arguments can be passed with values:\n  Keyword              Meaning                              Default value\n  :stream              Writer for output or nil             true (indicates *out*)\n  :base                Base to use for writing rationals    Current value of *print-base*\n  :circle*             If true, mark circular structures    Current value of *print-circle*\n  :length              Maximum elements to show in sublists Current value of *print-length*\n  :level               Maximum depth                        Current value of *print-level*\n  :lines*              Maximum lines of output              Current value of *print-lines*\n  :miser-width         Width to enter miser mode            Current value of *print-miser-width*\n  :dispatch            The pretty print dispatch function   Current value of *print-pprint-dispatch*\n  :pretty              If true, do pretty printing          Current value of *print-pretty*\n  :radix               If true, prepend a radix specifier   Current value of *print-radix*\n  :readably*           If true, print readably              Current value of *print-readably*\n  :right-margin        The column for the right margin      Current value of *print-right-margin*\n  :suppress-namespaces If true, no namespaces in symbols    Current value of *print-suppress-namespaces*\n\n  * = not yet supported\n"}, single-defn {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3002, :column 8, :end-line 3002, :end-column 19, :private true, :arglists (quote ([alis has-doc-str?]))}, :private true, :name cljs.pprint/single-defn, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([alis has-doc-str?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3002, :end-line 3002, :max-fixed-arity 2, :fn-var true, :arglists (quote ([alis has-doc-str?]))}, pprint-condp {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3093, :column 8, :end-line 3093, :end-column 20, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-condp, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3093, :end-line 3093, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, right-bracket {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2565, :column 8, :end-line 2565, :end-column 21, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/right-bracket, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2565, :end-line 2565, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, set-field {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 156, :column 8, :end-line 156, :end-column 17, :private true, :arglists (quote ([this sym new-val]))}, :private true, :name cljs.pprint/set-field, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([this sym new-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this sym new-val]))}, get-writer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 172, :column 8, :end-line 172, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-writer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, ->t_cljs$pprint27318 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([writer max-columns fields meta27319])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27318, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([writer max-columns fields meta27319]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 188, :max-fixed-arity 4, :fn-var true, :arglists (quote ([writer max-columns fields meta27319])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, ->indent-t {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 259, :column 10, :end-line 259, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag logical-block relative-to offset start-pos end-pos]))}, :name cljs.pprint/->indent-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([type-tag logical-block relative-to offset start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 259, :end-line 259, :max-fixed-arity 6, :fn-var true, :arglists (quote ([type-tag logical-block relative-to offset start-pos end-pos]))}, english-ordinal-tens {:name cljs.pprint/english-ordinal-tens, :file "public/js/out/cljs/pprint.cljs", :line 1161, :column 1, :end-line 1162, :end-column 26, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1162, :column 6, :end-line 1162, :end-column 26, :private true}}, nl {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 586, :column 8, :end-line 586, :end-column 10, :private true, :arglists (quote ([this type]))}, :private true, :name cljs.pprint/nl, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 10, :method-params ([this type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 586, :end-line 586, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this type]))}, ->t_cljs$pprint27749 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([downcase-writer writer meta27750])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27749, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([downcase-writer writer meta27750]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1919, :max-fixed-arity 3, :fn-var true, :arglists (quote ([downcase-writer writer meta27750])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, choice-conditional {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1689, :column 8, :end-line 1689, :end-column 26, :private true, :arglists (quote ([params arg-navigator offsets]))}, :private true, :name cljs.pprint/choice-conditional, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1689, :end-line 1689, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params arg-navigator offsets]))}, check-arg-conditional {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1713, :column 8, :end-line 1713, :end-column 29, :private true, :arglists (quote ([params arg-navigator offsets]))}, :private true, :name cljs.pprint/check-arg-conditional, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 29, :method-params ([params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1713, :end-line 1713, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params arg-navigator offsets]))}, reader-macros {:name cljs.pprint/reader-macros, :file "public/js/out/cljs/pprint.cljs", :line 2786, :column 1, :end-line 2786, :end-column 36, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2786, :column 23, :end-line 2786, :end-column 36, :private true}}, format-cardinal-english {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1219, :column 8, :end-line 1219, :end-column 31, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-cardinal-english, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 31, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1219, :end-line 1219, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, t_cljs$pprint27761 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27761, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 3, :line 1940, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, extract-param {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2452, :column 8, :end-line 2452, :end-column 21, :private true, :arglists (quote ([[s offset saw-comma]]))}, :private true, :name cljs.pprint/extract-param, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([p__27870]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2452, :end-line 2452, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[s offset saw-comma]]))}, get-fixed {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1503, :column 8, :end-line 1503, :end-column 17, :private true, :arglists (quote ([m e d]))}, :private true, :name cljs.pprint/get-fixed, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([m e d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1503, :end-line 1503, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m e d]))}, make-indent-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([logical-block relative-to offset start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-indent-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([logical-block relative-to offset start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :max-fixed-arity 5, :fn-var true, :arglists (quote ([logical-block relative-to offset start-pos end-pos]))}, flag-defs {:name cljs.pprint/flag-defs, :file "public/js/out/cljs/pprint.cljs", :line 2481, :column 1, :end-line 2482, :end-column 15, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2482, :column 6, :end-line 2482, :end-column 15, :private true}}, -ppflush {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 145, :column 4, :end-line 145, :end-column 12, :protocol cljs.pprint/IPrettyFlush, :doc nil, :arglists (quote ([pp]))}, :protocol cljs.pprint/IPrettyFlush, :name cljs.pprint/-ppflush, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 12, :method-params ([pp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pp])), :doc nil}, ->t_cljs$pprint27785 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([init-cap-writer writer capped meta27786])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint27785, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([init-cap-writer writer capped meta27786]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 2011, :max-fixed-arity 4, :fn-var true, :arglists (quote ([init-cap-writer writer capped meta27786])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, miser-nl? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 328, :column 8, :end-line 328, :end-column 17, :private true, :arglists (quote ([this lb section]))}, :private true, :name cljs.pprint/miser-nl?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([this lb section]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this lb section]))}, iterate-sublist {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1730, :column 8, :end-line 1730, :end-column 23, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-sublist, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1730, :end-line 1730, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, *print-right-margin* {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 630, :column 2, :end-line 630, :end-column 22, :doc "Pretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all\nnon-mandatory newlines.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-right-margin*, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :column 1, :dynamic true, :line 625, :end-line 630, :doc "Pretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all\nnon-mandatory newlines."}, abort? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1374, :column 8, :end-line 1374, :end-column 14, :private true, :arglists (quote ([context]))}, :private true, :name cljs.pprint/abort?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 14, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1374, :end-line 1374, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context]))}, map->indent-t {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 259, :column 10, :end-line 259, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__27371]))}, :name cljs.pprint/map->indent-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([G__27371]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__27371]))}, type-map {:name cljs.pprint/type-map, :file "public/js/out/cljs/pprint.cljs", :line 2862, :column 1, :end-line 2863, :end-column 9, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2863, :column 1, :end-line 2863, :end-column 9, :private true}}, buffer-blob {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/buffer-blob, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :type true, :column 10, :internal-ctor true, :line 250, :record true, :end-line 250, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, t_cljs$pprint27318 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint27318, :file "public/js/out/cljs/pprint.cljs", :type true, :anonymous true, :column 6, :line 188, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, capitalize-word-writer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1981, :column 8, :end-line 1981, :end-column 30, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing all words"}, :private true, :name cljs.pprint/capitalize-word-writer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 30, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1981, :end-line 1981, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing all words"}, write-out {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 724, :column 7, :end-line 724, :end-column 16, :arglists (quote ([object])), :doc "Write an object to *out* subject to the current bindings of the printer control\nvariables. Use the kw-args argument to override individual variables for this call (and\nany recursive calls).\n\n*out* must be a PrettyWriter if pretty printing is enabled. This is the responsibility\nof the caller.\n\nThis method is primarily intended for use by pretty print dispatch functions that\nalready know that the pretty printer will have set up their environment appropriately.\nNormal library clients should use the standard \"write\" interface. "}, :name cljs.pprint/write-out, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 16, :method-params ([object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 1, :fn-var true, :arglists (quote ([object])), :doc "Write an object to *out* subject to the current bindings of the printer control\nvariables. Use the kw-args argument to override individual variables for this call (and\nany recursive calls).\n\n*out* must be a PrettyWriter if pretty printing is enabled. This is the responsibility\nof the caller.\n\nThis method is primarily intended for use by pretty print dispatch functions that\nalready know that the pretty printer will have set up their environment appropriately.\nNormal library clients should use the standard \"write\" interface. "}, exponential-float {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1566, :column 8, :end-line 1566, :end-column 25, :private true, :arglists (quote ([params navigator offset]))}, :private true, :name cljs.pprint/exponential-float, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 25, :method-params ([params navigator offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1566, :end-line 1566, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offset]))}, format-ordinal-english {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1258, :column 8, :end-line 1258, :end-column 30, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-ordinal-english, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 30, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1258, :end-line 1258, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, convert-ratio {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1514, :column 8, :end-line 1514, :end-column 21, :private true, :arglists (quote ([x]))}, :private true, :name cljs.pprint/convert-ratio, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1514, :end-line 1514, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ancestor? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 236, :column 8, :end-line 236, :end-column 17, :private true, :arglists (quote ([parent child]))}, :private true, :name cljs.pprint/ancestor?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([parent child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent child]))}, plain-character {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1367, :column 8, :end-line 1367, :end-column 23, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/plain-character, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1367, :end-line 1367, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, format-new-roman {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1335, :column 8, :end-line 1335, :end-column 24, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-new-roman, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 24, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1335, :end-line 1335, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, print-char {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 32, :column 8, :end-line 32, :end-column 18, :private true, :arglists (quote ([c]))}, :private true, :name cljs.pprint/print-char, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, map-params {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2512, :column 8, :end-line 2512, :end-column 18, :private true, :arglists (quote ([def params flags offset])), :doc "Takes a directive definition and the list of actual parameters and\na map of flags and returns a map of the parameters and flags with defaults\nfilled in. We check to make sure that there are the right types and number\nof parameters as well."}, :private true, :name cljs.pprint/map-params, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([def params flags offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2512, :end-line 2512, :max-fixed-arity 4, :fn-var true, :arglists (quote ([def params flags offset])), :doc "Takes a directive definition and the list of actual parameters and\na map of flags and returns a map of the parameters and flags with defaults\nfilled in. We check to make sure that there are the right types and number\nof parameters as well."}, consume-while {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 93, :column 8, :end-line 93, :end-column 21, :private true, :arglists (quote ([func initial-context]))}, :private true, :name cljs.pprint/consume-while, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([func initial-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func initial-context]))}, buffer-blob? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__26493__auto__])), :file nil}, :private true, :name cljs.pprint/buffer-blob?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([x__26493__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__26493__auto__]))}, english-cardinal-units {:name cljs.pprint/english-cardinal-units, :file "public/js/out/cljs/pprint.cljs", :line 1145, :column 1, :end-line 1146, :end-column 28, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1146, :column 6, :end-line 1146, :end-column 28, :private true}}, absolute-reposition {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 976, :column 8, :end-line 976, :end-column 27, :private true, :arglists (quote ([navigator position]))}, :private true, :name cljs.pprint/absolute-reposition, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([navigator position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 976, :end-line 976, :max-fixed-arity 2, :fn-var true, :arglists (quote ([navigator position]))}, *default-page-width* {:name cljs.pprint/*default-page-width*, :file "public/js/out/cljs/pprint.cljs", :line 151, :column 1, :end-line 151, :end-column 53, :private true, :dynamic true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 151, :column 33, :end-line 151, :end-column 53, :private true, :dynamic true}}, make-start-block-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([logical-block start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-start-block-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :max-fixed-arity 3, :fn-var true, :arglists (quote ([logical-block start-pos end-pos]))}, p-write-char {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 478, :column 8, :end-line 478, :end-column 20, :private true, :arglists (quote ([this c]))}, :private true, :name cljs.pprint/p-write-char, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([this c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 478, :end-line 478, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this c]))}, tokens-fit? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 318, :column 8, :end-line 318, :end-column 19, :private true, :arglists (quote ([this tokens]))}, :private true, :name cljs.pprint/tokens-fit?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([this tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this tokens]))}, use-method {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2761, :column 8, :end-line 2761, :end-column 18, :private true, :arglists (quote ([multifn dispatch-val func])), :doc "Installs a function as a new method of multimethod associated with dispatch-value. "}, :private true, :name cljs.pprint/use-method, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 18, :method-params ([multifn dispatch-val func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2761, :end-line 2761, :max-fixed-arity 3, :fn-var true, :arglists (quote ([multifn dispatch-val func])), :doc "Installs a function as a new method of multimethod associated with dispatch-value. "}, pprint-simple-list {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2811, :column 8, :end-line 2811, :end-column 26, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-simple-list, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 26, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2811, :end-line 2811, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, ->compiled-directive {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 988, :column 3, :end-line 988, :end-column 21, :private true, :internal-ctor true, :factory :positional, :arglists (quote ([func def params offset]))}, :private true, :name cljs.pprint/->compiled-directive, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([func def params offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 987, :end-line 988, :max-fixed-arity 4, :fn-var true, :arglists (quote ([func def params offset]))}, pprint-if {:name cljs.pprint/pprint-if, :file "public/js/out/cljs/pprint.cljs", :line 3071, :column 1, :end-line 3071, :end-column 32, :private true, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3071, :column 23, :end-line 3071, :end-column 32, :private true}}, add-to-buffer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 433, :column 8, :end-line 433, :end-column 21, :private true, :arglists (quote ([this token]))}, :private true, :name cljs.pprint/add-to-buffer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([this token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 433, :end-line 433, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this token]))}, absolute-tabulation {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2102, :column 8, :end-line 2102, :end-column 27, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/absolute-tabulation, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 27, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2102, :end-line 2102, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, extract-flags {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2484, :column 8, :end-line 2484, :end-column 21, :private true, :arglists (quote ([s offset]))}, :private true, :name cljs.pprint/extract-flags, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 21, :method-params ([s offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2484, :end-line 2484, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s offset]))}, map-ref-type {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2866, :column 8, :end-line 2866, :end-column 20, :private true, :arglists (quote ([name])), :doc "Map ugly type names to something simpler"}, :private true, :name cljs.pprint/map-ref-type, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 20, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2866, :end-line 2866, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name])), :doc "Map ugly type names to something simpler"}, extract-params {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 2466, :column 8, :end-line 2466, :end-column 22, :private true, :arglists (quote ([s offset]))}, :private true, :name cljs.pprint/extract-params, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([s offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2466, :end-line 2466, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s offset]))}, make-end-block-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([logical-block start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-end-block-t, :variadic false, :file "public/js/out/cljs/pprint.cljs", :method-params ([logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :max-fixed-arity 3, :fn-var true, :arglists (quote ([logical-block start-pos end-pos]))}, tuple-map {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 108, :column 8, :end-line 108, :end-column 17, :private true, :arglists (quote ([m v1]))}, :private true, :name cljs.pprint/tuple-map, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([m v1]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m v1]))}, *print-base* {:meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 675, :column 1, :end-line 675, :end-column 13, :doc "The base to use for printing integers and rationals.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-base*, :file "public/js/out/cljs/pprint.cljs", :end-column 13, :column 1, :dynamic true, :line 672, :end-line 675, :doc "The base to use for printing integers and rationals."}, table-ize {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 710, :column 8, :end-line 710, :end-column 17, :private true, :arglists (quote ([t m]))}, :private true, :name cljs.pprint/table-ize, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 17, :method-params ([t m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 710, :end-line 710, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t m]))}, pretty-writer? {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 715, :column 8, :end-line 715, :end-column 22, :private true, :arglists (quote ([x])), :doc "Return true iff x is a PrettyWriter"}, :private true, :name cljs.pprint/pretty-writer?, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 715, :end-line 715, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return true iff x is a PrettyWriter"}, pprint-defn {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 3017, :column 8, :end-line 3017, :end-column 19, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-defn, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 19, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3017, :end-line 3017, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, downcase-writer {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/cljs/pprint.cljs", :line 1916, :column 8, :end-line 1916, :end-column 23, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to lower case"}, :private true, :name cljs.pprint/downcase-writer, :variadic false, :file "public/js/out/cljs/pprint.cljs", :end-column 23, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1916, :end-line 1916, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to lower case"}}, :require-macros {m cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{meta27774 :mandatory init-cap-writer seq :logical-blocks cljs.core/unquote when-first :arg3 logical-block-callback :suffix intra-block-nl :selector cljs.core/*print-level* *print-circle* :else-params :block :allows-separator last-was-whitespace? :indent cljs.pprint/*print-pretty* cljs.pprint/*print-pprint-dispatch* *print-suppress-namespaces* logical-block :miser-width struct rest .. *print-pretty* *print-pprint-dispatch* type-tag :buffer-block max-columns upcase-writer meta27786 :arg2 :commainterval :pretty-writer start-pos :parent meta27762 :sections :private data :else :miser :right-margin cljs.pprint/*print-base* if-not cljs.core/deref :offset *print-level* doseq :cur :queue :default suffix :added when-let :func :ns :symbol :generator-fn :name cljs.pprint/*print-radix* :n :w :not-delivered :remaining-arg-count :fill :section *print-length* cljs.pprint/*print-miser-width* cljs.core miser-width let :file -> :end-pos :circle indent :end-column :mode :start :lines meta27750 :params meta27768 fn :max-iterations :pos :writing cljs.pprint/*print-suppress-namespaces* :type pretty-writer parent :parameter-from-args :done-nl when-not :suppress-namespaces when :relative-to :string :vector defn capped offset :e if :char-format :start-col :radix func :colon-up-arrow ns :k :prefix :column :colon :stream :level *print-radix* :readably :right-bracket :dispatch fields end-pos section cljs.pprint/*print-right-margin* cljs.core/*print-length* cljs.pprint meta27464 params meta27756 struct-map :padchar dotimes :buffer-blob *print-lines* :dynamic :buffering :line done-nl pos with-open :list fn* :right-params defonce *print-miser-width* type defn- :max :trailing-white-space relative-to :mincol clojure.core/deref :minpad :current :at :deref :count :per-line-prefix meta27744 :colnum prefix cljs.core/*print-readably* :length loop start-col clojure.core/unquote :overflowchar :end-line condp :right :colinc cond meta27780 :both :d binding with-local-vars :def defmacro :clauses :indent-t cljs.pprint/*print-circle* :linear :seq locking . *print-right-margin* :first meta27319 var quote :bracket-info :set :base-args :pretty lb :end :logical-block-callback :base :arglists if-let *print-readably* capitalize-word-writer :hierarchy :buffer-level :intra-block-nl :line-relative :separator :flags writer trailing-white-space :doc :directive :section-relative :logical-block per-line-prefix :last :jsdoc cljs.pprint/*print-lines* :up-arrow :type-tag :map :min-remaining :test :rest meta27458 :arg1 :nl-t :buffer :start-pos :max-columns :start-block-t :exponentchar :end-block-t def *print-base* :data :commachar downcase-writer}, :order [:else :cur :line :max :base writer max-columns fields meta27319 :parent :section :start-col :indent :done-nl :intra-block-nl :prefix :per-line-prefix :suffix :logical-block-callback parent section start-col indent done-nl intra-block-nl prefix per-line-prefix suffix logical-block-callback :end-pos :start-pos :type-tag :data :trailing-white-space type-tag data trailing-white-space start-pos end-pos :buffer-blob :type :logical-block type logical-block :nl-t :start-block-t :end-block-t :relative-to :offset relative-to offset :indent-t :hierarchy :default :start :end :block :current :mandatory :fill :linear :miser :buffer :logical-blocks :buffering :mode :pos :writing :miser-width :buffer-block :pretty-writer :sections :buffer-level pretty-writer :private :arglists quote miser-width lb meta27458 meta27464 :right-margin :circle :lines :suppress-namespaces :radix :level :readably :dispatch :length :pretty cljs.pprint/*print-miser-width* :added :ns :name :file :end-column :column :dynamic :end-line :doc :test cljs.pprint *print-miser-width* cljs.pprint/*print-right-margin* *print-right-margin* cljs.pprint/*print-circle* *print-circle* cljs.pprint/*print-lines* *print-lines* cljs.pprint/*print-suppress-namespaces* *print-suppress-namespaces* cljs.pprint/*print-radix* *print-radix* cljs.core/*print-level* :jsdoc cljs.core *print-level* cljs.core/*print-readably* *print-readably* cljs.pprint/*print-pprint-dispatch* *print-pprint-dispatch* cljs.core/*print-length* *print-length* cljs.pprint/*print-pretty* *print-pretty* cljs.pprint/*print-base* *print-base* :stream :line-relative :section-relative :seq :rest seq rest pos :func :def :params func def params :colon :at :parameter-from-args :remaining-arg-count :minpad :mincol :colinc :padchar :commainterval :commachar :char-format :up-arrow :colon-up-arrow :base-args :w :d :k :overflowchar :e :exponentchar :n :selector :clauses :max-iterations :right-params :else-params :min-remaining :max-columns downcase-writer meta27744 meta27750 upcase-writer meta27756 meta27762 capitalize-word-writer last-was-whitespace? meta27768 meta27774 init-cap-writer capped meta27780 meta27786 :colnum :string :directive :flags :bracket-info :generator-fn :both :count :right :allows-separator :last :separator :first :arg1 :arg2 :arg3 :right-bracket var clojure.core/deref clojure.core/unquote cljs.core/deref cljs.core/unquote :not-delivered :queue :deref :symbol :list :map :vector :set . fn* when-first if condp .. defmacro defn loop struct doseq if-not when-not when with-open with-local-vars defonce when-let ns dotimes cond let fn defn- locking -> if-let binding struct-map]}, :doc nil}