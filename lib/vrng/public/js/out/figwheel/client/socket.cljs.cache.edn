;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name figwheel.client.socket, :imports nil, :requires {utils figwheel.client.utils, figwheel.client.utils figwheel.client.utils, cljs.reader cljs.reader}, :uses {read-string cljs.reader}, :defs {get-websocket-imp {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/figwheel/client/socket.cljs", :line 6, :column 7, :end-line 6, :end-column 24, :arglists (quote ([]))}, :name figwheel.client.socket/get-websocket-imp, :variadic false, :file "public/js/out/figwheel/client/socket.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, message-history-atom {:name figwheel.client.socket/message-history-atom, :file "public/js/out/figwheel/client/socket.cljs", :line 35, :column 1, :end-line 35, :end-column 30, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/figwheel/client/socket.cljs", :line 35, :column 10, :end-line 35, :end-column 30}}, socket-atom {:name figwheel.client.socket/socket-atom, :file "public/js/out/figwheel/client/socket.cljs", :line 37, :column 1, :end-line 37, :end-column 21, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/figwheel/client/socket.cljs", :line 37, :column 10, :end-line 37, :end-column 21}}, send! {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/figwheel/client/socket.cljs", :line 39, :column 7, :end-line 39, :end-column 12, :arglists (quote ([msg])), :doc "Send a end message to the server."}, :name figwheel.client.socket/send!, :variadic false, :file "public/js/out/figwheel/client/socket.cljs", :end-column 12, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "Send a end message to the server."}, close! {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/figwheel/client/socket.cljs", :line 45, :column 7, :end-line 45, :end-column 13, :arglists (quote ([]))}, :name figwheel.client.socket/close!, :variadic false, :file "public/js/out/figwheel/client/socket.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, open {:protocol-inline nil, :meta {:file "/home/phil/src/vr/dev/lib/vrng/public/js/out/figwheel/client/socket.cljs", :line 49, :column 7, :end-line 49, :end-column 11, :arglists (quote ([{:keys [retry-count retried-count websocket-url build-id], :as opts}]))}, :name figwheel.client.socket/open, :variadic false, :file "public/js/out/figwheel/client/socket.cljs", :end-column 11, :method-params ([p__25122]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [retry-count retried-count websocket-url build-id], :as opts}]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:ping :retried-count :else :debug :build-id :websocket-url :msg-name :retry-count}, :order [:else :retry-count :retried-count :websocket-url :build-id :debug :msg-name :ping]}, :doc nil}