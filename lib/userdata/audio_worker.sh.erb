#!/bin/bash

ENV_LIST=$(mktemp --tmpdir env.list.XXXXX)

cat >$ENV_LIST <<EOF
RUNNER_ENDPOINT=<%= runner_endpoint %>
AWS_ACCESS_KEY=<%= aws_access_key %>
AWS_SECRET_KEY=<%= aws_secret_key %>
INSTANCE=<%= client_token %>
INSTANCE_ENDPOINT=<%= instance_endpoint %>
QUEUE_ENDPOINT=<%= queue_endpoint %>
EOF

RUN_SH=$(mktemp --tmpdir run.sh.XXXXX)

cat >$RUN_SH <<EOF
docker run \
       --name=<%= base_class_name %> \
       --env-file=$ENV_LIST \
       branch14/audio_worker
EOF

chmod a+x $RUN_SH

$RUN_SH

if [ $? -eq 0 ]; then
    <% if Rails.env.production? %>
    echo "Success. Shutting down..."
    shutdown -h now
    # https://stackoverflow.com/questions/10541363
    <% else %>
    echo "Success. Cleaning up..."
    rm $ENV_LIST
    rm $RUN_SH
    docker rm <%= base_class_name %>

    <% end %>
else
    # If the system (spawned from a production instance) did not
    # shutdown itself at this point something bad happened (the docker
    # returned with a non-zero exit code). The system keeps running
    # for inspection & completeion of the failed task. It needs to be
    # shutdown manually. At this point it should trigger a slack
    # message or a similar notification.

    echo "Failed to run $RUN_SH"
fi
